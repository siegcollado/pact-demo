schema {
  query: Query
  mutation: Mutation
}
interface Node {
  id: ID!
}
type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}
interface Record {
  createdAt: AWSDateTime
}
enum StringFilterEnum {
  like
  eq
  neq
}
enum RangeFilterEnum {
  neq
  eq
  gt
  gte
  lte
  lt
}
enum BaseFilterEnum {
  eq
  neq
}
input StringComparatorInput {
  expression: StringFilterEnum!
  value: String!
}
input BooleanComparatorInput {
  expression: BaseFilterEnum!
  value: Boolean!
}
input FloatComparatorInput {
  expression: RangeFilterEnum!
  value: Float!
}
input IntComparatorInput {
  expression: RangeFilterEnum!
  value: Int!
}
type Product implements Node {
  price: Float
  name: String!
  id: ID!
}
type ProductEdge {
  node: Product
  cursor: String
}
type ProductConnection {
  edges: [ProductEdge!]
  pageInfo: PageInfo
}
type Mutation {
  deleteProduct(id: ID!): Boolean
  createProduct(input: CreateProductInput!): Product!
  updateProduct(input: UpdateProductInput!): Product!
}
type Query {
  getProduct(id: ID!): Product
}
input CreateProductInput {
  price: Float
  name: String!
}
input UpdateProductInput {
  price: Float
  name: String!
  id: ID!
}
